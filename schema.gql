# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Like {
  id: ID!
  createdAt: DateTime!
  user: User!
  userId: Float!
  post: Post!
  postId: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Answer {
  id: ID!
  createdAt: DateTime!
  text: String!
  question: Question!
  questionId: Float!
}

type Question {
  id: ID!
  createdAt: DateTime!
  text: String!
  user: User!
  userId: Float!
  post: Post!
  postId: Float!
  answer: Answer
}

type Post {
  id: ID!
  createdAt: DateTime!
  title: String!
  description: String!
  category: postCategory!
  date: DateTime!
  rigion: postRigion!
  adress: String!
  host: String!
  NumOfRecruitment: Float!
  recognizedHours: Float!
  isOpened: Boolean!
  isCompleted: Boolean!
  user: User!
  userId: Float!
  applications: [Application!]
  likes: [Like!]
  questions: [Question!]
}

enum postCategory {
  environment
  eventSupport
  communityService
  ruralAtivity
}

enum postRigion {
  Seoul
  Gyeonggi
  Incheon
  Chungcheong
  Jeolla
  Gyeongsang
  Jeju
}

type Application {
  id: ID!
  createdAt: DateTime!
  status: String!
  user: User!
  userId: Float!
  post: Post!
  postId: Float!
}

type Certificate {
  id: ID!
  createdAt: DateTime!
  title: String!
  host: String!
  recognizedHours: Float!
  date: DateTime!
  user: User!
  userId: Float!
}

type User {
  id: ID!
  createdAt: DateTime!
  email: String!
  username: String!
  password: String!
  avatar: String
  posts: [Post!]
  applications: [Application!]
  likes: [Like!]
  questions: [Question!]
  certificates: [Certificate!]
}

type GetMeOutput {
  ok: Boolean!
  error: String
  user: User
}

type GetProfileOutput {
  ok: Boolean!
  error: String
  user: User
  isSelf: Boolean!
}

type SignInOutput {
  ok: Boolean!
  error: String
  token: String
}

type SignUpOutput {
  ok: Boolean!
  error: String
  token: String
}

type CompletePostOutput {
  ok: Boolean!
  error: String
}

type CreatePostOutput {
  ok: Boolean!
  error: String
}

type DeletePostOutput {
  ok: Boolean!
  error: String
}

type EditPostOutput {
  ok: Boolean!
  error: String
}

type GetMyPostsOutput {
  ok: Boolean!
  error: String
  posts: [Post!]
}

type GetPostDetailOutput {
  ok: Boolean!
  error: String
  post: Post
  isMine: Boolean!
  isLiked: Boolean!
  isApplied: Boolean!
}

type GetPostsOutput {
  ok: Boolean!
  error: String
  posts: [Post!]
  totalCount: Float
  totalPage: Float
}

type ToggleOpenAndCloseOutput {
  ok: Boolean!
  error: String
}

type ApplyForPostOutput {
  ok: Boolean!
  error: String
}

type CalcelApplicationOutput {
  ok: Boolean!
  error: String
}

type GetMyApplicationsOutput {
  ok: Boolean!
  error: String
  applications: [Application!]
}

type HandleApplicationOutput {
  ok: Boolean!
  error: String
}

type GetMyLikesOutput {
  ok: Boolean!
  error: String
  likes: [Like!]
}

type ToggleLikeOutput {
  ok: Boolean!
  error: String
}

type CreateQuestionOuput {
  ok: Boolean!
  error: String
}

type DeleteQuestionOutput {
  ok: Boolean!
  error: String
}

type AnswerTheQuestionOutput {
  ok: Boolean!
  error: String
}

type GetMyCertificatesOutput {
  ok: Boolean!
  error: String
  certificates: [Certificate!]
}

type Query {
  getProfile(args: getProfileInput!): GetProfileOutput!
  getMe: GetMeOutput!
  getPostDetail(args: GetPostDetailInput!): GetPostDetailOutput!
  getMyPosts: GetMyPostsOutput!
  getPosts(args: GetPostsInput!): GetPostsOutput!
  getMyApplications: GetMyApplicationsOutput!
  getMyLikes: GetMyLikesOutput!
  getMyCertificates: GetMyCertificatesOutput!
}

input getProfileInput {
  userId: Float!
}

input GetPostDetailInput {
  postId: Float!
}

input GetPostsInput {
  categories: [postCategory!] = [communityService, environment, eventSupport, ruralAtivity]
  rigions: [postRigion!] = [Seoul, Gyeonggi, Incheon, Chungcheong, Gyeongsang, Jeolla, Jeju]
  page: Float!
  openOnly: Boolean = true
  searchTerm: String
}

type Mutation {
  signUp(args: SignUpInput!): SignUpOutput!
  signIn(args: SignInInput!): SignInOutput!
  createPost(args: CreatePostInput!): CreatePostOutput!
  editPost(args: EditPostInput!): EditPostOutput!
  toggleOpenAndClose(args: ToggleOpenAndCloseInput!): ToggleOpenAndCloseOutput!
  deletePost(args: DeletePostInput!): DeletePostOutput!
  completePost(args: CompletePostInput!): CompletePostOutput!
  applyForPost(args: ApplyForPostInput!): ApplyForPostOutput!
  handleApplication(args: HandleApplicationInput!): HandleApplicationOutput!
  cancelApplication(args: CancelApplicationInput!): CalcelApplicationOutput!
  toggleLike(args: ToggleLikeInput!): ToggleLikeOutput!
  createQuestion(args: CreateQuestionInput!): CreateQuestionOuput!
  deleteQuestion(args: DeleteQuestionInput!): DeleteQuestionOutput!
  answerTheQuestion(args: AnswerTheQuestionInput!): AnswerTheQuestionOutput!
}

input SignUpInput {
  email: String!
  username: String!
  password: String!
}

input SignInInput {
  email: String!
  password: String!
}

input CreatePostInput {
  title: String!
  description: String!
  category: postCategory!
  date: DateTime!
  rigion: postRigion!
  adress: String!
  host: String!
  NumOfRecruitment: Float!
  recognizedHours: Float!
}

input EditPostInput {
  title: String
  description: String
  category: postCategory
  date: DateTime
  rigion: postRigion
  adress: String
  host: String
  NumOfRecruitment: Float
  recognizedHours: Float
  postId: Float!
}

input ToggleOpenAndCloseInput {
  postId: Float!
}

input DeletePostInput {
  postId: Float!
}

input CompletePostInput {
  postId: Float!
}

input ApplyForPostInput {
  postId: Float!
}

input HandleApplicationInput {
  applicationId: Float!
  status: String!
}

input CancelApplicationInput {
  postId: Float!
}

input ToggleLikeInput {
  postId: Float!
}

input CreateQuestionInput {
  postId: Float!
  text: String!
}

input DeleteQuestionInput {
  questionId: Float!
}

input AnswerTheQuestionInput {
  questionId: Float!
  text: String!
}
