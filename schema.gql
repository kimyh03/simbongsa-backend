# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Answer {
  id: ID!
  createdAt: DateTime!
  text: String!
  question: Question!
  questionId: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Question {
  id: ID!
  createdAt: DateTime!
  text: String!
  user: User!
  userId: Float!
  post: Post!
  postId: Float!
  answer: Answer
}

type Certificate {
  id: ID!
  createdAt: DateTime!
  title: String!
  host: String!
  recognizedHours: Float!
  date: DateTime!
  user: User!
  userId: Float!
}

type User {
  id: ID!
  createdAt: DateTime!
  email: String!
  username: String!
  password: String!
  avatar: String
  activityCount: Float!
  activityTime: Float!
  posts: [Post!]
  applications: [Application!]
  likes: [Like!]
  questions: [Question!]
  certificates: [Certificate!]
}

type Like {
  id: ID!
  createdAt: DateTime!
  user: User!
  userId: Float!
  post: Post!
  postId: Float!
}

type Post {
  id: ID!
  createdAt: DateTime!
  title: String!
  description: String!
  category: postCategory!
  date: DateTime!
  rigion: postRigion!
  adress: String!
  host: String!
  NumOfRecruitment: Float!
  recognizedHours: Float!
  isOpened: Boolean!
  isCompleted: Boolean!
  user: User!
  userId: Float!
  applications: [Application!]
  likes: [Like!]
  questions: [Question!]
}

enum postCategory {
  environment
  eventSupport
  communityService
  ruralAtivity
}

enum postRigion {
  Seoul
  Gyeonggi
  Incheon
  Chungcheong
  Jeolla
  Gyeongsang
  Jeju
}

type Application {
  id: ID!
  createdAt: DateTime!
  status: String!
  user: User!
  userId: Float!
  post: Post!
  postId: Float!
}

type EditAvatarOutput {
  ok: Boolean!
  error: String
}

type GetProfileOutput {
  ok: Boolean!
  error: String
  user: User
  isSelf: Boolean!
  likes: [Like!]
  applications: [Application!]
}

type SignInOutput {
  ok: Boolean!
  error: String
  token: String
}

type SignUpOutput {
  ok: Boolean!
  error: String
  token: String
}

type CompletePostOutput {
  ok: Boolean!
  error: String
}

type CreatePostOutput {
  ok: Boolean!
  error: String
}

type DeletePostOutput {
  ok: Boolean!
  error: String
}

type GetPostDetailOutput {
  ok: Boolean!
  error: String
  post: Post
  questions: [Question!]
  applications: [Application!]
  isMine: Boolean!
  isLiked: Boolean!
  isApplied: Boolean!
}

type GetPostsOutput {
  ok: Boolean!
  error: String
  posts: [Post!]
  totalCount: Float
  totalPage: Float
}

type ToggleOpenAndCloseOutput {
  ok: Boolean!
  error: String
}

type HandleApplicationOutput {
  ok: Boolean!
  error: String
}

type ToggleApplyOutput {
  ok: Boolean!
  error: String
}

type ToggleLikeOutput {
  ok: Boolean!
  error: String
}

type CreateQuestionOuput {
  ok: Boolean!
  error: String
}

type AnswerTheQuestionOutput {
  ok: Boolean!
  error: String
}

type Query {
  getProfile(args: getProfileInput!): GetProfileOutput!
  getPostDetail(args: GetPostDetailInput!): GetPostDetailOutput!
  getPosts(args: GetPostsInput!): GetPostsOutput!
}

input getProfileInput {
  userId: Float!
}

input GetPostDetailInput {
  postId: Float!
}

input GetPostsInput {
  categories: [postCategory!]
  rigions: [postRigion!]
  page: Float!
  openOnly: Boolean
  searchTerm: String
}

type Mutation {
  signUp(args: SignUpInput!): SignUpOutput!
  signIn(args: SignInInput!): SignInOutput!
  editAvatar(args: EditAvatarInput!): EditAvatarOutput!
  createPost(args: CreatePostInput!): CreatePostOutput!
  toggleOpenAndClose(args: ToggleOpenAndCloseInput!): ToggleOpenAndCloseOutput!
  deletePost(args: DeletePostInput!): DeletePostOutput!
  completePost(args: CompletePostInput!): CompletePostOutput!
  toggleApply(args: ToggleApplyInput!): ToggleApplyOutput!
  handleApplication(args: HandleApplicationInput!): HandleApplicationOutput!
  toggleLike(args: ToggleLikeInput!): ToggleLikeOutput!
  createQuestion(args: CreateQuestionInput!): CreateQuestionOuput!
  answerTheQuestion(args: AnswerTheQuestionInput!): AnswerTheQuestionOutput!
}

input SignUpInput {
  email: String!
  username: String!
  password: String!
}

input SignInInput {
  email: String!
  password: String!
}

input EditAvatarInput {
  avatarKey: String!
}

input CreatePostInput {
  title: String!
  description: String!
  category: postCategory!
  date: DateTime!
  rigion: postRigion!
  adress: String!
  host: String!
  NumOfRecruitment: Float!
  recognizedHours: Float!
}

input ToggleOpenAndCloseInput {
  postId: Float!
}

input DeletePostInput {
  postId: Float!
}

input CompletePostInput {
  postId: Float!
}

input ToggleApplyInput {
  postId: Float!
}

input HandleApplicationInput {
  applicationId: Float!
  status: String!
}

input ToggleLikeInput {
  postId: Float!
}

input CreateQuestionInput {
  postId: Float!
  text: String!
}

input AnswerTheQuestionInput {
  questionId: Float!
  text: String!
}
